<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_ewindow</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sections Menu

//Inherit default create event
event_inherited()

//Currently displayed name
myname = "SECTIONS"

//Amount of categories
mycategories = 0

//Amount of rows
myrows = 2

//Section name textbox contents
mytext = ""

//Text that displays in text box if nothing is typed
search[0] = "type a section name"
search[1] = "type something first"
search[2] = "section does not exist"
search[3] = "cannot delete main"
search[4] = "section already exists"
search[5] = "too many sections"

//Allowed characters for section warping
allowed_text = " ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@$%^&amp;()[]-_=+'.,;`~" + '"'

//Keyboard inputs to be processed
current_key = ""

//Currently displayed error
error = 0

//Key reader
keyreader = instance_create(0,0,obj_keyreader)

//Delete button
with instance_create(x+3,y+27,obj_ewindow_button)
{
    sprite_index = spr_button_large
    persists = true
    mysound = noone
    mywindow = other
    myevent = 11
    myicon = spr_icon_close
    hovertext = "DELETE SECTION"
}

//Delete button
with instance_create(x+278,y+27,obj_ewindow_button)
{
    sprite_index = spr_button_large
    persists = true
    mysound = noone
    mywindow = other
    myevent = 12
    myicon = spr_icon_confirm
    hovertext = "CREATE SECTION"
}

//Create section buttons
event_user(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up key reader object
with keyreader instance_destroy()

//Inherit button destruction
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop showing error
error = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to a section

//Change the current section
global.currentsection = obj_editor.text

//Restart the room, which loads the section automatically!
room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard type event
    
//Make input upper-case
current_key = string_upper(current_key)

//Backspace
if current_key = "BACKSPACE"
{
    //Only backspace if there's still letters to delete
    if string_length(mytext) &gt; 0
    {
        //Play kick sound
        audio_play_sound(snd_kick2,0,0)
        
        //Remove one character from the search string
        mytext = string_delete(mytext,string_length(mytext),1)
    }
    
}
//New characters typed
else
{

    //Set the font
    draw_set_font(global.messagefont)
    
    //Key remapping
    current_key = string_replace(current_key,"{","(")
    current_key = string_replace(current_key,"}",")")
    current_key = string_replace(current_key,"&lt;","[")
    current_key = string_replace(current_key,"&gt;","]")
    
    //Iterate through the newly typed keys
    for(var i = 0; i &lt; string_length(current_key); i++)
    {
        //Check if the current character is allowed..
        if string_count(string_char_at(current_key,i),allowed_text) &gt; 0
        
        //..and make sure the search string isn't too long
        and string_length(mytext) &lt; 25
        {
            
            //If so, add it to the search string
            mytext += string_char_at(current_key,i)
            
            //Play kick sound
            audio_play_sound(snd_kick,0,0)
        }
    }
}

//Reset the font
draw_set_font(global.font)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create section

//If nothing has been typed..
if mytext = ""
{
    //..show the error
    alarm[0] = 30
    audio_play_sound(snd_wrong,0,0)
    error = 1
}

//If the section already exists..
else if json_exists(global.leveldata,mytext)
{
    //..show the error
    alarm[0] = 30
    audio_play_sound(snd_wrong,0,0)
    error = 4
}

//If there are too many sections..
else if ds_map_size(global.leveldata) &gt;= 75
{
    //..show the error
    alarm[0] = 30
    audio_play_sound(snd_wrong,0,0)
    error = 5
}

//Otherwise..
else
{
    //Create the new section
    scr_level_add_section(mytext)
    
    //Play the sweet sweet sound of success..
    audio_play_sound(snd_correct,0,0)
}

//Clear the section name text
mytext = ""

//Regenerate buttons
event_user(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete section

//If nothing has been typed..
if mytext = ""
{
    //..show the error
    alarm[0] = 30
    audio_play_sound(snd_wrong,0,0)
    error = 1
}

//If the section doesn't exist..
else if not json_exists(global.leveldata,mytext)
{
    //..show the error
    alarm[0] = 30
    audio_play_sound(snd_wrong,0,0)
    error = 2
}

//If the section is the main section..
else if mytext = "MAIN"
{
    //..show the error
    alarm[0] = 30
    audio_play_sound(snd_wrong,0,0)
    error = 3
}

//Otherwise..
else
{
    //Delete the section
    ds_map_delete(global.leveldata,mytext)
    
    //Play the sweet sweet sound of success..
    audio_play_sound(snd_correct,0,0)
}

//If the current section no longer exists..
if !json_exists(global.leveldata,global.currentsection)
{
    //Warp back to main
    global.currentsection = "MAIN"
    room_restart()
}

//Clear the section name text
mytext = ""

//Regenerate buttons
event_user(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate section buttons
menu = 1

//Amount of rows
myrows = 2

//Used to calculate where each button in the grid should be
var xcoord = -1,
    ycoord = 1;

//Iterate through all sections
for(var i = json_iterate(global.leveldata,ds_type_map); json_has_next(i); json_next(i))
{
    //Update coordinates
    xcoord++
    if xcoord &gt; 14
    {
        xcoord = 0
        myrows++
        ycoord++
    }
    //Create a button
    with instance_create(xstart+3 + (24*xcoord),ystart+27 + (24*ycoord),obj_ewindow_button)
    {
        //Make the cursor display the section name when hovered over
        hovertext = i[JSONITER.KEY]
        
        //Default section icon
        myicon = spr_levelpanel
        
        //Make the icon the start panel if it's the main section
        if i[JSONITER.KEY] = "MAIN"
            myicon = spr_start
        
        //Make the button go to the section it displays when clicked on
        mywindow = other
        myevent = 14
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the textbox

//Inherit default editor window draw event
event_inherited()

//Draw the text box
draw_sprite_ext(spr_typer,0,x+88,y+27,1,1,0,c_white,0.7)

//Center the text
draw_set_halign(fa_center)

//Draw text if it exists
if string_length(mytext) &gt; 0
    draw_text(x+182,y+34,mytext)

//Otherwise, draw the error
else
   draw_text(x+182,y+34,search[error])
   
//Reset text alignment
draw_set_halign(fa_left)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
