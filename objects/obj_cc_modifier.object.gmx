<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_icon_text</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code modifier!

/*
** Type of modifier.
**
** 0: Item Modifier (such as mushroom, yoshi egg sprouts, etc.)
** 1: Text Modifier
** 2: Destination Marker
** 3: Message Modifier
*/
mytype = 0

//The modifier content
content = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Modifier logic

//Object being currently modified
var _modobj;

//If this modifier is an item modifier..
if mytype = 0
{

    //Question block modifier script
    modobj = collision_point(x,y,obj_block,false,true)
    if modobj
        modobj.sprout = content
    
    //Hidden question block modifier script
    modobj = collision_point(x,y,obj_block_hidden,false,true)
    if modobj
        modobj.sprout = content
    
    //Triple question block modifier script
    modobj = collision_point(x,y,obj_block_triple,false,true)
    if modobj
        modobj.sprout[(x-modobj.x)/16] = content
    
    //Hidden triple question block modifier script
    modobj = collision_point(x,y,obj_block_triple_hidden,false,true)
    if modobj
        modobj.sprout[(x-modobj.x)/16] = content
    
    //Large block modifier script
    modobj = collision_point(x,y,obj_block_large,false,true)
    if modobj
    and modobj.x = x
    and modobj.y = y
        modobj.sprout = content
    
    //Spiked block modifier script
    modobj = collision_point(x,y,obj_block_spiked,false,true)
    if modobj
        modobj.sprout = content
            
    //Winged block modifier script
    modobj = collision_point(x,y,obj_block_winged,false,true)
    if modobj
        modobj.sprout = content
    
    //Bump block modifier script
    modobj = collision_point(x,y,obj_bump,false,true)
    if modobj
        modobj.sprout = content
        
    //Note block modifier script
    modobj = collision_point(x,y,obj_noteblock,false,true)
    if modobj
        modobj.sprout = content
        
    //Hidden note block modifier script
    modobj = collision_point(x,y,obj_noteblock_hidden,false,true)
    if modobj
        modobj.sprout = content
        
    //Yellow note block modifier script
    modobj = collision_point(x,y,obj_noteblock_yellow,false,true)
    if modobj
        modobj.sprout = content
        
        
    //Hidden yellow note block modifier script
    modobj = collision_point(x,y,obj_yellownoteblock_hidden,false,true)
    if modobj
        modobj.sprout = content
        
    //Warp note block modifier script
    modobj = collision_point(x,y,obj_noteblock_warp,false,true)
    if modobj
        modobj.sprout = content
        
    //Hidden note block modifier script
    modobj = collision_point(x,y,obj_warpnoteblock_hidden,false,true)
    if modobj
        modobj.sprout = content
        
    //Brick block modifier script
    modobj = collision_point(x,y,obj_brick,false,true)
    if modobj
    {
        with modobj
        {
            instance_change(obj_block,true)
            sprite_index = spr_brick
            sprout = other.content
        }
    }
    
    //Flip block modifier script
    modobj = collision_point(x,y,obj_flipblock,false,true)
    if modobj
    {
        with modobj
        {
            instance_change(obj_block,true)
            sprite_index = spr_flipblock
            image_speed = 0
            sprout = other.content
        }
    }
    
    //Bubble item modifier script
    modobj = collision_point(x,y,obj_bubble_item,false,true)
    if modobj
    and modobj.item == -1
    {
        modobj.item = content
        modobj.sprite = scr_constant_get_sprite(content)
    }

}

//Text modifier
if mytype = 1
{
    //Warp marker modifier script
    modobj = collision_point(x,y,obj_warpmarker,false,true)
    if modobj
    {
        if not string_count(",",content) &gt; 0
            modobj.mydest = content
        else
        {
            modobj.mydest = string_copy(content,0,string_pos(",",content)-1)
            modobj.mysection = string_copy(content,string_pos(",",content)+1,string_length(content)-(string_pos(",",content)))
        }
    }
    
    //Bullet generator modifier script
    modobj = collision_point(x,y,obj_bulletgenerator,false,true)
    if modobj
    and scr_find_destination(content) != -1
    {
        if modobj.xmin = 0
            modobj.xmin = x
        if modobj.xmax = room_width
            modobj.xmax = scr_find_destination(content).x
    }
     
    //Storm generator modifier script
    modobj = collision_point(x,y,obj_stormgenerator,false,true)
    if modobj
    and scr_find_destination(content) != -1
    {
        if modobj.xmin = 0
            modobj.xmin = x
        if modobj.xmax = room_width
            modobj.xmax = scr_find_destination(content).x
    }
     
    //Cheep cheep generator modifier script
    modobj = collision_point(x,y,obj_cheepgenerator,false,true)
    if modobj
    and scr_find_destination(content) != -1
    {
        if modobj.xmin = 0
            modobj.xmin = x
        if modobj.xmax = room_width
            modobj.xmax = scr_find_destination(content).x
    }
     
    //Lakitu modifier script
    modobj = collision_point(x,y,obj_lakitu,false,true)
    if modobj
    and scr_find_destination(content) != -1
    {
        if modobj.xmin = 0
            modobj.xmin = x
        if modobj.xmax = room_width
            modobj.xmax = scr_find_destination(content).x
    }
     
    //Ball Lakitu modifier script
    modobj = collision_point(x,y,obj_lakitu_ball,false,true)
    if modobj
    and scr_find_destination(content) != -1
    {
        if modobj.xmin = 0
            modobj.xmin = x
        if modobj.xmax = room_width
            modobj.xmax = scr_find_destination(content).x
    }
     
    //Angry sun modifier script
    modobj = collision_point(x,y,obj_angrysun,false,true)
    if modobj
    and scr_find_destination(content) != -1
    {
        if modobj.xmin = 0
            modobj.xmin = x
        if modobj.xmax = room_width
            modobj.xmax = scr_find_destination(content).x
    }
     
    //Magikoopa modifier script
    modobj = collision_point(x,y,obj_magikoopa,false,true)
    if modobj
    and scr_find_destination(content) != -1
    {
        if modobj.xmin = 0
            modobj.xmin = x
        if modobj.xmax = room_width
            modobj.xmax = scr_find_destination(content).x
    }
    
    //Bowser fire modifier script
    modobj = collision_point(x,y,obj_classicbowser,false,true)
    if modobj
    and scr_find_destination(content) != -1
    {
        modobj.xmin = scr_find_destination(content).x
    }
    
    //Door modifier script
    modobj = collision_point(x,y,obj_door,false,true)
    if modobj
    {
        if not string_count(",",content) &gt; 0
            modobj.mydest = content
        else
        {
            modobj.mydest = string_copy(content,0,string_pos(",",content)-1)
            modobj.mysection = string_copy(content,string_pos(",",content)+1,string_length(content)-(string_pos(",",content)))
        }
    }
    
    //Warp note block modifier script
    modobj = collision_point(x,y,obj_noteblock_warp,false,true)
    if modobj
    {
        if string_count(",",content) &gt; 0
        {
            modobj.mydest = string_copy(content,0,string_pos(",",content)-1)
            modobj.mysection = string_copy(content,string_pos(",",content)+1,string_length(content)-(string_pos(",",content)))
        }
    }
    
    //Speed modifier script
    modobj = collision_point(x,y,obj_speedmarker,false,true)
    if modobj
        modobj.setspeed = real(string_digits(content))
}

//Message modifier
if mytype = 3
{
    //Message block modifier script
    if instance_position(x,y,obj_messageblock)
        with instance_position(x,y,obj_messageblock)
        {
            varmsg = other.content
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
