<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_small</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-8</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's... one of those clicky things!

//Is the button being hovered over?
hover = 0

//Is the button being clicked on?
active = 0

//The button text
mytext = ""

//The button icon (if applicable)
myicon = noone

//Text that the cursor will display when this button is hovered over
hovertext = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button logic

//Previous state for mouse hover
var hover_previous = hover;

//Check if the mouse is hovering over the button
if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_cursorparent,false,false)
{
    //Make the button white
    hover = 1
    
    //Make the cursor display the button's hover text
    with obj_cursorparent
    {
        text = other.hovertext
    }
    
    //If the player is clicking the button...
    if mouse_check_button(mb_left)
    {
        //..make the button upside down
        active = 1
    }
    else
    {
        active = 0
    }
    
    //Check for if the player releases the mouse.
    if mouse_check_button_released(mb_left)
    {
    
        //If so, process the input.
        event_user(0)
        
    }
}
//Otherwise, make sure the button is in its default mode.
else
{
    hover = 0
    active = 0
}
    
//If the player starts hovering over the button, play the sound.
if hover_previous == 0
and hover == 1
    audio_play_sound(snd_move,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse clicking on button event

//This just plays a sound by default.
audio_play_sound(snd_correct,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the button
draw_sprite_ext(sprite_index,hover+active,x,y,1,1,0,c_white,0.7)

//Align the text
draw_set_halign(fa_center)
draw_set_valign(fa_middle)

//Draw the text
draw_text(x+(sprite_width/2),y+(sprite_height/2),mytext)

//Reset text alignment
draw_set_halign(fa_left)
draw_set_valign(fa_top)

//Draw icon if it exists
if myicon != noone
and sprite_exists(myicon)
{
    
    draw_sprite_general(myicon,0,0,0,min(sprite_get_width(myicon),16),min(sprite_get_height(myicon),16),floor(x+(sprite_width/2)-min(sprite_get_width(myicon),16)/2),floor(y+(sprite_height/2)-min(sprite_get_height(myicon),16)/2),1,1,0,c_white,c_white,c_white,c_white,0.7)
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
