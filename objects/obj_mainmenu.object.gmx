<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_cursorparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open Editor level select menu!

//Inherit default create event
event_inherited()

/*
**  Current Main Menu mode
**
**  0: Search
**  1: New Level
*/
mode = 0

//Is it showing the error?
error_showing = 0

//Current search string (or level name)
search = ""

//Most recently processed keyboard input
current_key = ""

//Type to search text
search_default = "type to search"

//Type a level name text
search_level = "type a level name"

//Error text
search_error = "level must have a name"

//Creation error text
create_error = "level already exists"

//Challenge error text
challenge_error = "not enough levels"

//Characters that are allowed to be typed into the search bar
allowed = " ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@$%^&amp;()[]-_=+'.,;`~"

//Maximum amount of characters in the search string
search_max = 25

//List of levels in level folder
level_dir = ds_list_create()
scr_level_get_levels(level_dir)

//Create the level list based on level folder
level_list = array_create(0)
for(var i = 0; i &lt; ds_list_size(level_dir); i++)
{
    level_list[i] = instance_create(0,0,obj_mainmenu_level)
    with level_list[i]
    {
        levelname = string_copy(string_upper(ds_list_find_value(other.level_dir,i)),0,string_length(string_upper(ds_list_find_value(other.level_dir,i)))-5)
        levelfile = string_copy(ds_list_find_value(other.level_dir,i),0,string_length(ds_list_find_value(other.level_dir,i)))
    }
}

//Reset challenge mode progress if it's not already reset
if global.challenge != 0
{
    global.challenge = 0
    global.challenge_levels = array_create(0)
    ds_list_destroy(global.challenge_list)
}

//Create New Level button
instance_create(13,7,obj_mainmenu_newlevel)

//Create Challenges button
instance_create(288,7,obj_mainmenu_challenge)

//Create key reader
instance_create(0,0,obj_keyreader)

//Set alarm to play music
alarm[1] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the title music if it's not already playing
if not audio_is_playing(snd_titlemusic)
    audio_play_sound(snd_titlemusic,99,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop showing the error
error_showing = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main menu logic

//Handle level searching
for(var i = 0, t = 0; i &lt; array_length_1d(level_list); i++)
{
    //Check if the level is being searched for
    if (string_count(search,level_list[i].levelname) &gt; 0
    and mode = 0)
    or mode = 1
    {
        //If so, move it into view accordingly.
        level_list[i].x = 10
        level_list[i].y = 36 + (32 * t)
        t++
    }
    //If it's not, move its listing off-screen.
    else
    {
        level_list[i].y = -200
    }
    
    //Adjust the height of the room if there are a lot of levels
    room_height = max(216, 67 + (32 * t))
}

//Track old camera position
var old_vx = view_xview[0]
var old_vy = view_yview[0]

//Let player move the camera with arrow keys and cursor
if keyboard_check(vk_up)
or y &lt; view_yview[0] + 8
    view_yview[0] -= 5 + (10 * keyboard_check(vk_control))
if keyboard_check(vk_down)
or y &gt; view_yview[0] + view_hview[0] - 8
    view_yview[0] += 5 + (10 * keyboard_check(vk_control))

//Scroll wheel to move camera
if mouse_wheel_up()
    view_yview[0] -= 15
if mouse_wheel_down()
    view_yview[0] += 15

//Make sure camera stays within the room
if view_yview[0] &lt; 0
    view_yview[0] = 0
if view_yview[0] &gt; room_height - view_hview[0]
    view_yview[0] = room_height - view_hview[0]
    
//Adjust cursor position to account for view change
x += view_xview[0] - old_vx
y += view_yview[0] - old_vy
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a new level

//Check for levels with the same name
for(var i = 0, t = 0; i &lt; array_length_1d(level_list); i++)
{
    //If the name matches..
    if level_list[i].levelname = search
    {
    
        //Show the error
        error_showing = 2
        
        //Clear the search
        search = ""
        
        //Set alarm to stop showing error
        alarm[0] = 30
        
        //Play the error sound
        audio_play_sound(snd_wrong,0,0)
    
        //Do not go to the level editor
        exit
        
    }
}

//If the level doesn't have a name..
if search = ""
{
    
    //Show the error
    error_showing = 1
    
    //Set alarm to stop showing error
    alarm[0] = 30
    
    //Play the error sound
    audio_play_sound(snd_wrong,0,0)

    //Do not go to the level editor
    exit
    
}

//Edit mode
global.editorstate = es_edit

//Generate level data
scr_level_new(search+".json")

//Go to the level editor
room_goto(rm_editor)

//Play enter level sound
audio_play_sound(snd_enterstage,0,0)

//Stop the title screen music
audio_stop_sound(snd_titlemusic)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard type event

//Backspace
if current_key = "BACKSPACE"
{
    //Only backspace if there's still letters to delete
    if string_length(search) &gt; 0
    {
        //Play kick sound
        audio_play_sound(snd_kick2,0,0)
        
        //Remove one character from the search string
        search = string_delete(search,string_length(search),1)
        
        //Go back to the top
        view_yview[0] = 0
    }
    
}
//New characters typed
else
{
    //Remap curly brackets to the parenthesis
    current_key = string_replace(current_key,"{","(")
    current_key = string_replace(current_key,"}",")")
    
    //Loop through all new characters
    for(var i = 0; i &lt; string_length(current_key); i++)
    {
        //Check if the current character is allowed..
        if string_count(string_char_at(current_key,i),allowed) &gt; 0
        
        //..and make sure the search string isn't too long
        and string_length(search) &lt; search_max
        {
            
            //If so, add it to the search string
            search += string_char_at(current_key,i)
            
            //Play kick sound
            audio_play_sound(snd_kick,0,0)
            
            //Go back to the top
            view_yview[0] = 0
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New Level button click event

//Clear the search string
search = ""
keyboard_string = ""

//Toggle the mode
mode = !mode

//With the new level button
with obj_mainmenu_newlevel
{
    if other.mode == 1
    {
        //Set text
        mytext = "cancel"
        
        //Add create button and destroy challenge button
        with obj_mainmenu_challenge instance_destroy()
        instance_create(288,7,obj_mainmenu_create)
    }
    else
    {
        //Set text
        mytext = "new level"
        
        //Add challenge button and destroy create button
        with obj_mainmenu_create instance_destroy()
        instance_create(288,7,obj_mainmenu_challenge)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear level folder listing from memory
ds_list_destroy(level_dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the UI

//Draw the white box
draw_sprite_ext(spr_editor_box,0,10,4,1,1,0,c_white,0.7)

//Draw the search box
draw_sprite_ext(spr_typer,0,98,7,1,1,0,c_white,0.7)

//Align search text
draw_set_halign(fa_center)
draw_set_valign(fa_middle)

//Draw search text
if search == ""
{
    if mode = 0
        draw_text(192,18,search_default)
    else if not error_showing
        draw_text(192,18,search_level)
    else if error_showing = 1
        draw_text(192,18,search_error)
    else if error_showing = 2
        draw_text(192,18,create_error)
    else
        draw_text(192,18,challenge_error)
}
else
    draw_text(192,18,search)
    
//Reset text alignment
draw_set_halign(fa_left)
draw_set_valign(fa_top)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
