<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The X Mario Challenge!

//Has the player selected how many levels they wanna do?
started = 0
    
//Is the challenge completed?
completed = 0

//Amount the text has scrolled
scroll = 0

//Level selection
selection = 0

//Current level name
mylevel = ""

//Current level file name
myfile = ""

//Title text
menutext = "THE &lt;X&gt; MARIO CHALLENGE"

//Set alarm to play the music
alarm[0] = 2

//If the challenge hasn't started yet..
if global.challenge = 0
{
    
    //Get a list of levels
    global.challenge_list = ds_list_create()
    scr_level_get_levels(global.challenge_list)
    
    //Make the order of levels random
    ds_list_shuffle(global.challenge_list)
    
    //Level selection
    selection = min(ds_list_size(global.challenge_list),10)
    
}

//If it has started, and isn't complete..
else if global.challenge &gt; array_length_1d(global.challenge_levels)
{
    
    //It has started
    started = 1
    
    //Select the next level
    event_user(0)
    
}
//If the challenge is complete..
else
{
    
    //Show challenge completed text
    completed = 1
    
    //Set alarm to play the fanfare
    alarm[2] = 2
    
    //Play music after fanfare ends
    alarm[0] = 360
    
    //Set the text
    menutext = "CONGRATULATIONS##YOU HAVE COMPLETED THE &lt;X&gt; MARIO CHALLENGE##"
    
    //Add the level names to the challenge complete text
    for(var i = 0; i &lt; array_length_1d(global.challenge_levels); i++)
    {
        menutext += "##"+string_upper(global.challenge_levels[i])
    }
    
}

//Stop the title music
if audio_is_playing(snd_titlemusic)
    audio_stop_sound(snd_titlemusic)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the fanfare!
audio_play_sound(snd_bossclear,0,0)

//Mario is the winner!
audio_play_sound(snd_hoohoo,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start the challenge
started = 1
global.challenge = selection
event_user(0)

//Make the lightning flash
instance_create(0,0,obj_lightningsheet)

//Play the thunder sound
audio_play_sound(snd_thunder,0,0)

//Give the player an appropriate amount of lives
lives = global.challenge
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play music

//Wait for fanfare to end
if audio_is_playing(snd_bossclear)
{
    alarm[0] = 1
}

//When fanfare is complete..
else
{
    //Play the music
    audio_play_sound(snd_bonusmusic,99,1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Challenge logic

//If the challenge is complete..
if completed
{
    
    //Scroll the text
    scroll += .25
    
    //Scroll the text faster if enter is pressed
    if keyboard_check(vk_enter)
    {
        scroll += 3.75
    }
    
    //Go to main menu if the text scrolls off-screen
    if scroll - string_height(menutext) &gt; view_hview[0] + 8
    {
        audio_stop_all()
        room_goto(rm_select)
    }
    
}

//If the challenge hasn't started yet..
else if not started
{
    
    //Press left to subtract from selection
    if keyboard_check_pressed(vk_left)
    and selection &gt; 1
    {
        selection--
        audio_play_sound(snd_move,0,0)
    }
    
    //Press right to add to selection
    if keyboard_check_pressed(vk_right)
    and selection &lt; ds_list_size(global.challenge_list)
    {
        selection++
        audio_play_sound(snd_move,0,0)
    }
        
    //Press enter to start the challenge
    if keyboard_check_pressed(vk_enter)
    {
        alarm[1] = 1
    }
    
}
//If the challenge has been started..
else
{
    
    //Press enter to play the level
    if keyboard_check_pressed(vk_enter)
    {
        
        //Play the enter level sound
        audio_play_sound(snd_enterstage,0,0)
        
        //Set the level name
        global.levelname = myfile
        
        //Load the level
        scr_load(myfile)
        
        //Go to main section
        global.currentsection = "MAIN"
        
        //Clear level variables
        scr_clearvars()
        
        //Remember we're in challenge mode
        global.editorstate = es_challenge
        
        //Make Mario say "Let's go!"
        audio_play_sound(snd_letsgo,0,0)
        
        //Stop the music
        audio_stop_sound(snd_bonusmusic)
        
        //Enter the level
        room_goto(rm_editor)
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select the next level

//Level file name
myfile = ds_list_find_value(global.challenge_list,array_length_1d(global.challenge_levels))

//Level name
mylevel = string_upper(string_copy(myfile,0,string_length(myfile)-5))

//Remember the level's name
global.challenge_levels[array_length_1d(global.challenge_levels)] = mylevel
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw challenges screen

//Center the text
draw_set_halign(fa_center)

//If the challenge is not complete..
if not completed
{
    
    //Press enter to continue text
    draw_text(192,192,"PRESS ENTER TO CONTINUE")
    
    //If the challenge hasn't started yet..
    if not started
    {
    
        //Draw title text
        draw_text(192,16,string_replace(menutext,"&lt;X&gt;","X"))
        
        //Tell player to select the amount of levels
        draw_text(192,48,"SELECT NUMBER OF LEVELS TO PLAY")
        
        //Draw the selection
        draw_text(192,80,string(selection))
        
        //Draw the arrows
        draw_sprite_ext(spr_challenge_arrow,0,192+floor(string_width(string(selection)))+13,79,1,1,0,c_white,1)
        draw_sprite_ext(spr_challenge_arrow,0,192-floor(string_width(string(selection)))-13,79,-1,1,0,c_white,1)

    }
    //Otherwise..
    else
    {
    
        //Draw title text
        draw_text(192,16,string_replace(menutext,"&lt;X&gt;",string(global.challenge)))
        
        //Draw the level number
        draw_text(192,48,"LEVEL " + string(array_length_1d(global.challenge_levels))+"/"+string(global.challenge))
        
        //Draw the level name
        draw_text(192,80,mylevel)
        
        //Draw the amount of lives remaining
        draw_sprite(spr_mariohud,0,180-floor(string_width(string(lives))/2),112)
        draw_set_halign(fa_left)
        draw_text(floor(204-floor(string_width(string(lives))/2)),112,string(lives))
    }
        
}

//If the challenge is completed..
else
{
    
    //Draw the scrolling text
    draw_text(192,floor(view_hview[0]-scroll),string_replace(menutext,"&lt;X&gt;",global.challenge))
    
}

//Reset text alignment
draw_set_halign(fa_left)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
